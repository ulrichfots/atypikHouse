generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?      @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  favoriteIds     String[]     @db.ObjectId
  role            Role         @default(USER)

  accounts        Account[]
  listings        Listing[]
  reservations    Reservation[]
  sentMessages    Message[]    @relation("SentMessages")
  receivedMessages Message[]   @relation("ReceivedMessages")
  comments        Comment[]
}

enum Role {
  USER
  MANAGER
  ADMIN
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Listing {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  imageSrc        String
  createdAt       DateTime     @default(now())
  category        String
  roomCount       Int
  bathroomCount   Int
  guestCount      Int
  locationValue   String
  userId          String       @db.ObjectId
  price           Int
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations    Reservation[]
  comments        Comment[]
}

model Reservation {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  userId          String       @db.ObjectId
  listingId       String       @db.ObjectId
  startDate       DateTime
  endDate         DateTime
  totalPrice      Int
  status          String?      @default("PENDING")
  paymentId       String?
  createdAt       DateTime     @default(now())
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing         Listing      @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Message {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  content         String
  senderId        String       @db.ObjectId
  receiverId      String       @db.ObjectId
  chatId          String       @db.ObjectId       // Ajout du champ chatId pour la relation avec Chat
  createdAt       DateTime     @default(now())
  isDelivered     Boolean      @default(false)
  isRead          Boolean      @default(false)

  // Relations
  chat            Chat         @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender          User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver        User         @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Chat {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  userIDs         String[]     // IDs des utilisateurs participant au chat
  messages        Message[]
  seenBy          String[]     // IDs des utilisateurs ayant vu le chat
  lastMessage     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([userIDs])
}

model Comment {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  content         String
  createdAt       String
  updatedAt       String     
  userId          String       @db.ObjectId
  listingId       String       @db.ObjectId

  // Relations
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing         Listing      @relation(fields: [listingId], references: [id], onDelete: Cascade)
}
